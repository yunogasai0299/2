//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/ControlsEditor.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsEditor"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""959ba4bf-53d6-4144-b39a-0116938c1f00"",
            ""actions"": [
                {
                    ""name"": ""Motion"",
                    ""type"": ""Value"",
                    ""id"": ""86602a6e-ae0b-406d-84c7-355949683711"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""e097f3f4-6607-47de-be4a-112caa319b3f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""84de12ac-7cdf-49cb-bcb1-e6878924ba97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputInvoke"",
                    ""type"": ""Button"",
                    ""id"": ""1e660355-0427-47b6-a434-923a54964f50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f583e72f-3cd5-48dd-ab1e-a67ee0392db9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3404beb8-4d90-412a-a3dd-1bad2e0b61c1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0fdd2f2d-acf6-4d20-a3c6-ccb5aa4020c5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9ec3f7d1-bc83-4be4-b338-80d0eaa86945"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ee335a68-2809-45a8-828e-88487a415163"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1798cb42-53f7-41ee-93a0-d98575450020"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""InputInvoke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2d49dba-428e-4469-a860-8188e4ac486c"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""InputInvoke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""386acd70-fa2d-4656-a39c-6a676069bb14"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""QE"",
                    ""id"": ""3c1dce58-4e38-449a-bd87-99d1c45088f1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""11b0b923-b704-49b4-b553-b73a9549f5fd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c70842f6-9acd-4e66-b39b-1dc680046349"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ShapeMotion"",
            ""id"": ""50f77e47-378a-49f3-a33f-a741a31280bf"",
            ""actions"": [
                {
                    ""name"": ""StartMotion"",
                    ""type"": ""Button"",
                    ""id"": ""fbec8c99-3a7f-47c1-a560-772e99673968"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopMotion"",
                    ""type"": ""Button"",
                    ""id"": ""065e4d43-88f2-4525-a80a-035a6911f4d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26724b0a-67a2-4cc1-8b47-57670155f004"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""StartMotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02ae0858-7146-4e9b-833f-77a6b6949155"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""StopMotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseAndKeyboard"",
            ""bindingGroup"": ""MouseAndKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Motion = m_Character.FindAction("Motion", throwIfNotFound: true);
        m_Character_Rotation = m_Character.FindAction("Rotation", throwIfNotFound: true);
        m_Character_Jump = m_Character.FindAction("Jump", throwIfNotFound: true);
        m_Character_InputInvoke = m_Character.FindAction("InputInvoke", throwIfNotFound: true);
        // ShapeMotion
        m_ShapeMotion = asset.FindActionMap("ShapeMotion", throwIfNotFound: true);
        m_ShapeMotion_StartMotion = m_ShapeMotion.FindAction("StartMotion", throwIfNotFound: true);
        m_ShapeMotion_StopMotion = m_ShapeMotion.FindAction("StopMotion", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private ICharacterActions m_CharacterActionsCallbackInterface;
    private readonly InputAction m_Character_Motion;
    private readonly InputAction m_Character_Rotation;
    private readonly InputAction m_Character_Jump;
    private readonly InputAction m_Character_InputInvoke;
    public struct CharacterActions
    {
        private @NewControls m_Wrapper;
        public CharacterActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Motion => m_Wrapper.m_Character_Motion;
        public InputAction @Rotation => m_Wrapper.m_Character_Rotation;
        public InputAction @Jump => m_Wrapper.m_Character_Jump;
        public InputAction @InputInvoke => m_Wrapper.m_Character_InputInvoke;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
            {
                @Motion.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMotion;
                @Motion.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMotion;
                @Motion.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMotion;
                @Rotation.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnRotation;
                @Jump.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnJump;
                @InputInvoke.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInputInvoke;
                @InputInvoke.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInputInvoke;
                @InputInvoke.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInputInvoke;
            }
            m_Wrapper.m_CharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Motion.started += instance.OnMotion;
                @Motion.performed += instance.OnMotion;
                @Motion.canceled += instance.OnMotion;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @InputInvoke.started += instance.OnInputInvoke;
                @InputInvoke.performed += instance.OnInputInvoke;
                @InputInvoke.canceled += instance.OnInputInvoke;
            }
        }
    }
    public CharacterActions @Character => new CharacterActions(this);

    private readonly InputActionMap m_ShapeMotion;
    private IShapeMotionActions m_ShapeMotionActionsCallbackInterface;
    private readonly InputAction m_ShapeMotion_StartMotion;
    private readonly InputAction m_ShapeMotion_StopMotion;
    public struct ShapeMotionActions
    {
        private @NewControls m_Wrapper;
        public ShapeMotionActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartMotion => m_Wrapper.m_ShapeMotion_StartMotion;
        public InputAction @StopMotion => m_Wrapper.m_ShapeMotion_StopMotion;
        public InputActionMap Get() { return m_Wrapper.m_ShapeMotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShapeMotionActions set) { return set.Get(); }
        public void SetCallbacks(IShapeMotionActions instance)
        {
            if (m_Wrapper.m_ShapeMotionActionsCallbackInterface != null)
            {
                @StartMotion.started -= m_Wrapper.m_ShapeMotionActionsCallbackInterface.OnStartMotion;
                @StartMotion.performed -= m_Wrapper.m_ShapeMotionActionsCallbackInterface.OnStartMotion;
                @StartMotion.canceled -= m_Wrapper.m_ShapeMotionActionsCallbackInterface.OnStartMotion;
                @StopMotion.started -= m_Wrapper.m_ShapeMotionActionsCallbackInterface.OnStopMotion;
                @StopMotion.performed -= m_Wrapper.m_ShapeMotionActionsCallbackInterface.OnStopMotion;
                @StopMotion.canceled -= m_Wrapper.m_ShapeMotionActionsCallbackInterface.OnStopMotion;
            }
            m_Wrapper.m_ShapeMotionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartMotion.started += instance.OnStartMotion;
                @StartMotion.performed += instance.OnStartMotion;
                @StartMotion.canceled += instance.OnStartMotion;
                @StopMotion.started += instance.OnStopMotion;
                @StopMotion.performed += instance.OnStopMotion;
                @StopMotion.canceled += instance.OnStopMotion;
            }
        }
    }
    public ShapeMotionActions @ShapeMotion => new ShapeMotionActions(this);
    private int m_MouseAndKeyboardSchemeIndex = -1;
    public InputControlScheme MouseAndKeyboardScheme
    {
        get
        {
            if (m_MouseAndKeyboardSchemeIndex == -1) m_MouseAndKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseAndKeyboard");
            return asset.controlSchemes[m_MouseAndKeyboardSchemeIndex];
        }
    }
    public interface ICharacterActions
    {
        void OnMotion(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInputInvoke(InputAction.CallbackContext context);
    }
    public interface IShapeMotionActions
    {
        void OnStartMotion(InputAction.CallbackContext context);
        void OnStopMotion(InputAction.CallbackContext context);
    }
}
